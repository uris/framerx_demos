import * as React from "react"
import { Frame, addPropertyControls, ControlType } from "framer"
import { url } from "framer/resource"

export function Spinner(props) {
    const { size, color, mode, ...restProps } = props

    const getImage = () => {
        switch (props.color) {
            case "contentPrimary":
                return props.mode === "light"
                    ? "./assets/spinner-black-3x.png"
                    : "./assets/spinner-white-3x.png"
                break
            case "contentHighlight":
                return props.mode === "light"
                    ? "./assets/spinner-teal-LM-3x.png"
                    : "./assets/spinner-teal-DM-3x.png"
                break
            case "contentButtonPrimary":
                return "./assets/spinner-white-3x.png"
                break
            case "contentButtonSecondary":
                return props.mode === "light"
                    ? "./assets/spinner-black-3x.png"
                    : "./assets/spinner-white-3x.png"
                break
        }
    }
    const spinnerImage = React.useMemo(() => getImage(), [size, color, mode])

    return (
        <Frame
            {...restProps}
            background={{ src: url(spinnerImage) }}
            style={{ backgroundSize: props.size }}
            animate={{ rotate: 360 }}
            transition={{ ease: "linear", duration: 1, loop: Infinity }}
        />
    )
}

//  ------------------------------------------------------------------
//  PROPS

Spinner.defaultProps = {
    width: 24,
    height: 24,
}

addPropertyControls(Spinner, {
    size: {
        type: ControlType.Enum,
        title: "Size",
        options: ["24px", "20px", "16px"],
        optionTitles: ["Default (24)", "Medium (20)", "Small (16)"],
        defaultValue: "24px",
    },
    color: {
        title: "Color",
        type: ControlType.Enum,
        options: [
            "contentPrimary",
            "contentHighlight",
            "contentButtonPrimary",
            "contentButtonSecondary",
        ],
        optionTitles: [
            "Primary",
            "Highlight",
            "Button (Primary)",
            "Button (Secondary)",
        ],
        defaultValue: "contentPrimary",
    },
    mode: {
        type: ControlType.SegmentedEnum,
        title: "Mode",
        options: ["light", "dark"],
        optionTitles: ["Light", "Dark"],
        defaultValue: "light",
    },
})
