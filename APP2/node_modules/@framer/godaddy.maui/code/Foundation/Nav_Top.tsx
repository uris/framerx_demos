import * as React from "react"
import { Frame, addPropertyControls, ControlType, Stack } from "framer"
import {
    themeColors,
    glyphOptions,
    glyphOptionTitles,
    textStyles,
    // @ts-ignore
} from "./Shared"
// @ts-ignore
import { Text } from "./Text"
// @ts-ignore
import { Glyph } from "./Glyph"

// const bounds = "hsla(0, 100%, 50%, 0.5)"
const bounds = "none"

export function Nav_Top(props) {
    //  ------------------------------------------------------------------
    //  NAV HEIGHT

    const getNavHeight = () => {
        switch (props.phone) {
            case "iPhoneX":
                return 88
                break
            case "iPhone8":
                return 64
                break
            case "pixel3":
                return 81
                break
        }
    }
    const navHeight = React.useMemo(() => getNavHeight(), [props])

    //  ------------------------------------------------------------------
    //  CONTENT HEIGHT

    const getContentHeight = () => {
        switch (props.phone) {
            case "iPhoneX":
                return 44
                break
            case "iPhone8":
                return 44
                break
            case "pixel3":
                return 56
                break
        }
    }
    const contentHeight = React.useMemo(() => getContentHeight(), [props])

    //  ------------------------------------------------------------------
    //  CENTER FRAME

    const getCenterFrame = () => {
        switch (props.center) {
            case "text":
                return (
                    <Frame
                        width={"100%"}
                        height={contentHeight}
                        bottom={0}
                        background={bounds}
                    >
                        <Frame
                            center
                            width={"auto"}
                            height={24}
                            style={{
                                ...textStyles.title,
                                fontFamily: "GDSherpa-Bold",
                            }}
                            color={
                                props.mode === "light"
                                    ? themeColors.light.contentPrimary
                                    : themeColors.dark.contentPrimary
                            }
                            background={bounds}
                        >
                            {props.centerText}
                        </Frame>
                    </Frame>
                )
                break
            case "filter":
                return (
                    <Stack
                        width={"100%"}
                        height={contentHeight}
                        bottom={0}
                        gap={4}
                        direction={"horizontal"}
                        distribution={"center"}
                        alignment={"center"}
                        background={bounds}
                    >
                        <Frame
                            width={"auto"}
                            height={24}
                            style={{
                                ...textStyles.title,
                                fontFamily: "GDSherpa-Bold",
                            }}
                            color={
                                props.mode === "light"
                                    ? themeColors.light.contentPrimary
                                    : themeColors.dark.contentPrimary
                            }
                            background={bounds}
                        >
                            {props.centerText}
                        </Frame>
                        <Glyph
                            glyph="caretDown12"
                            width={12}
                            height={12}
                            background={bounds}
                            color={"contentPrimary"}
                            mode={props.mode}
                        />
                    </Stack>
                )
                break
        }
    }
    const centerFrame = React.useMemo(() => getCenterFrame(), [props])

    //  ------------------------------------------------------------------
    //  LEFT FRAME

    const getLeftFrame = () => {
        switch (props.left) {
            case "glyph":
                return (
                    <Frame
                        width={44}
                        height={contentHeight}
                        left={6}
                        bottom={0}
                        background={bounds}
                        onTap={props.onTapButtonLeft}
                    >
                        <Glyph
                            glyph={props.leftGlyph}
                            center
                            mode={props.mode}
                        />
                    </Frame>
                )
                break
            case "text":
                return (
                    <Frame
                        width={"auto"}
                        height={contentHeight}
                        left={6}
                        bottom={0}
                        style={{
                            ...textStyles.body,
                            paddingLeft: "12px",
                            paddingRight: "12px",
                        }}
                        color={
                            props.mode === "light"
                                ? themeColors.light.contentHighlight
                                : themeColors.dark.contentHighlight
                        }
                        background={bounds}
                    >
                        {props.leftText}
                    </Frame>
                )
                break
            case "none":
                return null
                break
        }
    }
    const leftFrame = React.useMemo(() => getLeftFrame(), [props])

    //  ------------------------------------------------------------------
    //  RIGHT FRAME

    const getRightFrame = () => {
        switch (props.right) {
            case "glyph":
                return (
                    <Frame
                        width={44}
                        height={contentHeight}
                        right={6}
                        bottom={0}
                        background={bounds}
                    >
                        <Glyph
                            glyph={props.rightGlyph}
                            center
                            mode={props.mode}
                        />
                    </Frame>
                )
                break
            case "text":
                return (
                    <Frame
                        width={"auto"}
                        height={contentHeight}
                        right={6}
                        bottom={0}
                        style={{
                            ...textStyles.body,
                            paddingLeft: "12px",
                            paddingRight: "12px",
                        }}
                        color={
                            props.mode === "light"
                                ? themeColors.light.contentHighlight
                                : themeColors.dark.contentHighlight
                        }
                        background={bounds}
                    >
                        {props.rightText}
                    </Frame>
                )
                break
            case "none":
                return null
                break
        }
    }
    const rightFrame = React.useMemo(() => getRightFrame(), [props])

    //  ------------------------------------------------------------------
    //  BACKGROUND STYLE

    const getBackgroundStyle = () => {
        switch (props.phone) {
            case "iPhoneX":
            case "iPhone8":
                // Only show blur for prototypes, for performance issues
                if (props.purpose === "prototype") {
                    return {
                        WebkitBackdropFilter: "blur(20px)",
                        backdropFilter: "blur(20px)",
                    }
                    break
                }
        }
    }
    const backgroundStyle = React.useMemo(() => getBackgroundStyle(), [props])

    //  ------------------------------------------------------------------
    //  BACKGROUND COLOR

    const getBackgroundColor = () => {
        switch (props.phone) {
            case "iPhoneX":
            case "iPhone8":
                if (props.mode === "light") {
                    return themeColors.light.bgNavIOS
                } else {
                    return themeColors.dark.bgNavIOS
                }
                break
            case "pixel3":
                if (props.mode === "light") {
                    return themeColors.light.bgNavAndroid
                } else {
                    return themeColors.dark.bgNavAndroid
                }
                break
        }
    }
    const backgroundColor = React.useMemo(() => getBackgroundColor(), [props])

    //  ------------------------------------------------------------------
    //  MAIN

    return (
        <Frame
            width="100%"
            height={navHeight}
            style={backgroundStyle}
            background={backgroundColor}
        >
            {centerFrame}
            {leftFrame}
            {rightFrame}
        </Frame>
    )
}

//  ------------------------------------------------------------------
//  PROPS

Nav_Top.defaultProps = {
    width: 375,
    height: 88,
    onTapButtonLeft: () => {
        console.log("here")
    },
}

addPropertyControls(Nav_Top, {
    phone: {
        title: "Phone",
        type: ControlType.Enum,
        options: ["iPhoneX", "iPhone8", "pixel3"],
        optionTitles: ["iPhone X (88)", "iPhone 8 (64)", "Pixel 3 (81)"],
        defaultValue: "iPhoneX",
    },
    left: {
        title: "Left",
        type: ControlType.SegmentedEnum,
        options: ["glyph", "text", "none"],
        optionTitles: ["Glyph", "Text", "None"],
        defaultValue: "glyph",
    },
    leftGlyph: {
        title: "→",
        type: ControlType.Enum,
        options: glyphOptions.sort(),
        optionTitles: glyphOptionTitles.sort(),
        hidden: ({ left }) => left !== "glyph",
        defaultValue: "arrowLeft",
    },
    leftText: {
        title: "→",
        type: ControlType.String,
        hidden: ({ left }) => left !== "text",
        defaultValue: "Cancel",
    },
    center: {
        title: "Center",
        type: ControlType.SegmentedEnum,
        options: ["text", "filter"],
        optionTitles: ["Title", "Filter"],
        defaultValue: "title",
    },
    centerText: {
        title: "→",
        type: ControlType.String,
        defaultValue: "Title",
    },
    right: {
        title: "Right",
        type: ControlType.SegmentedEnum,
        options: ["glyph", "text", "none"],
        optionTitles: ["Glyph", "Text", "None"],
        defaultValue: "none",
    },
    rightGlyph: {
        title: "→",
        type: ControlType.Enum,
        options: glyphOptions.sort(),
        optionTitles: glyphOptionTitles.sort(),
        hidden: ({ right }) => right !== "glyph",
        defaultValue: "Calendar",
    },
    rightText: {
        title: "→",
        type: ControlType.String,
        hidden: ({ right }) => right !== "text",
        defaultValue: "Save",
    },
    mode: {
        title: "Mode",
        type: ControlType.SegmentedEnum,
        options: ["light", "dark"],
        optionTitles: ["Light", "Dark"],
        defaultValue: "light",
    },
    purpose: {
        title: "Purpose",
        type: ControlType.Enum,
        options: ["mockup", "prototype"],
        optionTitles: ["Mockup", "Prototype"],
        defaultValue: "mockup",
    },
})
