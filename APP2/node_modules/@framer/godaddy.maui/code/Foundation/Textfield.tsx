import * as React from "react"
import { Frame, addPropertyControls, ControlType, Override } from "framer"
// @ts-ignore
import { themeColors, textStyles, speed } from "./Shared"
// @ts-ignore
import { Cursor } from "./Cursor"
// @ts-ignore
import { Text } from "./Text"
// @ts-ignore
import { Glyph } from "./Glyph"
// @ts-ignore
import { Divider } from "./Divider"

export function Textfield(props) {
    const {
        type,
        align,
        label,
        hint,
        value,
        focus,
        mode,
        purpose,
        onValueChange,
        ...restProps
    } = props

    //  ------------------------------------------------------------------------------------
    //  BOUNDS

    // const bounds = "hsla(0, 100%, 50%, 0.5)"
    const bounds = "hsla(0, 100%, 50%, 0)"

    //  ------------------------------------------------------------------
    //  REF

    const ref = React.createRef<HTMLInputElement>()

    //  ------------------------------------------------------------------
    //  STATE

    const [state, setState] = React.useState({
        value: props.value,
        focus: props.focus,
    })

    React.useEffect(() => {
        ref.current.value = value
        if (props.purpose === "prototype" && props.focus === true) {
            ref.current.focus()
        }
        setState({
            value: props.value,
            focus: props.focus,
        })
    }, [type, align, label, hint, value, focus, mode, purpose])

    //  ------------------------------------------------------------------
    //  ON TAP

    const onTap = () => {
        ref.current.focus()
    }

    //  ------------------------------------------------------------------
    //  ON FOCUS

    const onFocus = () => {
        setState({
            ...state,
            focus: true,
        })
    }

    //  ------------------------------------------------------------------
    //  ON BLUR

    const onBlur = () => {
        if (state.value === "") {
            setState({
                ...state,
                focus: purpose === "mockup" ? true : false,
            })
        } else {
            setState({
                ...state,
                focus: purpose === "mockup" ? true : false,
            })
        }
    }

    //  ------------------------------------------------------------------
    //  ON CHANGE

    function onChange(event) {
        setState({
            ...state,
            value: ref.current.value,
        })
        props.onValueChange(ref.current.value)
    }

    //  ------------------------------------------------------------------
    //  RENDER VALUE

    const renderValue = () => {
        if (state.value === "") {
            return hint
        } else {
            return state.value
        }
    }

    //  ------------------------------------------------------------------
    //  GET HEIGHT

    const getHeight = () => {
        switch (type) {
            case "open":
                return 50
                break
            case "form":
                return 72
            case "search":
                return 42
        }
    }

    //  ------------------------------------------------------------------
    //  RENDER CONTENT

    const renderContent = () => {
        switch (type) {
            //  ----------------------------------------------------------
            //  FORM

            case "form":
                return (
                    <Frame size="100%" background="none">
                        <Text
                            name="Label"
                            height={20}
                            top={0}
                            left={0}
                            right={0}
                            content={label}
                            size="detail"
                            align="left"
                            color="contentPrimary"
                            mode={mode}
                            background={bounds}
                        />
                        <Frame
                            name="Field"
                            width="100%"
                            height={48}
                            background={
                                state.focus
                                    ? themeColors[mode]["bgHighlight"]
                                    : themeColors[mode]["bgTertiary"]
                            }
                            bottom={0}
                            radius="6px 6px 0 0"
                            overflow="hidden"
                        >
                            <Frame
                                name="Text Wrapper"
                                width="auto"
                                left={16}
                                right={16}
                                top={14}
                                height={22}
                                background="none"
                            >
                                <Cursor
                                    name="Initial Cursor"
                                    height={22}
                                    visible={
                                        state.focus === true &&
                                        state.value === ""
                                            ? true
                                            : false
                                    }
                                    state={state.focus}
                                    mode={props.mode}
                                />
                                <span
                                    style={{
                                        ...textStyles.body,
                                        color:
                                            state.value === ""
                                                ? themeColors[mode]
                                                      .contentTertiary
                                                : themeColors[mode]
                                                      .contentPrimary,
                                    }}
                                >
                                    {renderValue()}
                                </span>
                                <Cursor
                                    name="Filled Cursor"
                                    height={22}
                                    visible={
                                        state.focus === true &&
                                        state.value !== ""
                                            ? true
                                            : false
                                    }
                                    state={state.focus}
                                    mode={props.mode}
                                />
                            </Frame>
                            <Frame
                                name="Line"
                                width="100%"
                                height={1}
                                left={0}
                                bottom={0}
                                visible={state.focus}
                                background={themeColors[mode].contentHighlight}
                            />
                            {/* here */}
                            <Divider mode={mode} />
                            {/* Darken on tap */}
                            <Frame
                                name="While Tap"
                                size="100%"
                                background={
                                    mode === "light" ? "black" : "white"
                                }
                                opacity={0}
                                whileTap={{
                                    opacity: 0.1,
                                }}
                            />
                        </Frame>
                    </Frame>
                )
                break

            //  ----------------------------------------------------------
            //  SEARCH

            case "search":
                return (
                    <Frame
                        size="100%"
                        radius={8}
                        background={themeColors[mode].bgSecondary}
                        overflow="hidden"
                    >
                        <Glyph
                            name="Search"
                            size={20}
                            glyph="search20"
                            color="contentSecondary"
                            left={12}
                            top={11}
                            mode={mode}
                        />
                        <Frame
                            name="Text Wrapper"
                            width="auto"
                            top={11}
                            left={44}
                            right={44}
                            height={22}
                            background=""
                        >
                            <Cursor
                                name="Initial Cursor"
                                height={22}
                                visible={
                                    state.focus === true && state.value === ""
                                        ? true
                                        : false
                                }
                                state={state.focus}
                                mode={props.mode}
                            />
                            <span
                                style={{
                                    ...textStyles.body,
                                    color:
                                        state.value === ""
                                            ? themeColors[mode].contentSecondary
                                            : themeColors[mode].contentPrimary,
                                }}
                            >
                                {renderValue()}
                            </span>
                            <Cursor
                                name="Filled Cursor"
                                height={22}
                                visible={
                                    state.focus === true && state.value !== ""
                                        ? true
                                        : false
                                }
                                state={state.focus}
                                mode={props.mode}
                            />
                        </Frame>
                        <Frame
                            name="While Tap"
                            size="100%"
                            background={mode === "light" ? "black" : "white"}
                            opacity={0}
                            whileTap={{
                                opacity: 0.1,
                            }}
                        />
                        <Frame
                            name="Clear Button"
                            size={42}
                            right={0}
                            background="none"
                            visible={state.value !== "" ? true : false}
                            onTap={() => {
                                ref.current.value = ""
                                ref.current.focus()
                                setState({
                                    ...state,
                                    value: "",
                                    focus: true,
                                })
                            }}
                            whileTap={{
                                opacity: 0.8,
                            }}
                        >
                            <Glyph
                                name="Search"
                                width={20}
                                height={20}
                                center
                                glyph="clear20"
                                color="contentTertiary"
                                mode={mode}
                            />
                        </Frame>
                    </Frame>
                )
                break

            //  ----------------------------------------------------------
            //  OPEN

            case "open":
                return (
                    <Frame
                        name="Text Wrapper"
                        width="100%"
                        height={26}
                        center
                        background="none"
                        style={{ textAlign: align }}
                        whileTap={{
                            opacity: 0.5,
                        }}
                    >
                        <Cursor
                            name="Initial Cursor"
                            height={26}
                            visible={
                                state.focus === true && state.value === ""
                                    ? true
                                    : false
                            }
                            state={state.focus}
                            mode={props.mode}
                        />
                        <span
                            style={{
                                ...textStyles.h4,
                                color:
                                    state.value === ""
                                        ? themeColors[mode].contentTertiary
                                        : themeColors[mode].contentPrimary,
                            }}
                        >
                            {renderValue()}
                        </span>
                        <Cursor
                            name="Filled Cursor"
                            height={26}
                            background={themeColors[mode].contentHighlight}
                            visible={
                                state.focus === true && state.value !== ""
                                    ? true
                                    : false
                            }
                            state={state.focus}
                        />
                    </Frame>
                )
                break
        }
    }

    const textfieldContent = React.useMemo(() => renderContent(), [
        type,
        align,
        label,
        hint,
        value,
        focus,
        purpose,
        state,
    ])

    //  ------------------------------------------------------------------
    //  MAIN

    return (
        // Textfield
        <Frame
            {...restProps}
            width="100%"
            height={getHeight()}
            onTap={onTap}
            background="none"
        >
            {textfieldContent}
            {/* Invisible Input */}
            <input
                ref={ref}
                style={{
                    width: "0%",
                    height: "0%",
                    opacity: 0,
                }}
                type={"text"}
                autoCapitalize={"off"}
                autoComplete={"off"}
                autoCorrect={"off"}
                spellCheck={false}
                placeholder={"original input"}
                onFocus={onFocus}
                onChange={onChange}
                onBlur={onBlur}
            />
        </Frame>
    )
}

//  ------------------------------------------------------------------
//  PROPS

Textfield.defaultProps = {
    width: 311,
    height: 72,
    onValueChange: () => {},
}

addPropertyControls(Textfield, {
    type: {
        title: "Type",
        type: ControlType.Enum,
        options: ["form", "search", "open"],
        optionTitles: ["Form (72)", "Search(42)", "Open (50)"],
        defaultValue: "form",
    },
    align: {
        title: "Align",
        type: ControlType.SegmentedEnum,
        options: ["left", "center", "right"],
        optionTitles: ["Left", "Center", "Right"],
        defaultValue: "center",
        hidden: ({ type }) => type !== "open",
    },
    label: {
        title: "Label",
        type: ControlType.String,
        defaultValue: "Label",
        hidden: ({ type }) => type !== "form",
    },
    hint: {
        title: "Hint",
        type: ControlType.String,
        defaultValue: "Placeholder text",
    },
    value: {
        title: "Value",
        type: ControlType.String,
        defaultValue: "",
    },
    focus: {
        title: "Focus",
        type: ControlType.Boolean,
        defaultValue: false,
    },
    mode: {
        type: ControlType.SegmentedEnum,
        title: "Mode",
        options: ["light", "dark"],
        optionTitles: ["Light", "Dark"],
        defaultValue: "light",
    },
    purpose: {
        title: "Purpose",
        type: ControlType.Enum,
        options: ["mockup", "prototype"],
        optionTitles: ["Mockup", "Prototype"],
        defaultValue: "mockup",
    },
})
