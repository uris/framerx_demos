import * as React from "react"
import { Frame, addPropertyControls, ControlType, Stack, Color } from "framer"

import {
    themeColors,
    glyphOptions,
    glyphOptionTitles,
    glyphOptions12,
    glyphOptionTitles12,
    textStyles,
    transitions,
    // @ts-ignore
} from "./Shared"
// @ts-ignore
import { Text } from "./Text"
// @ts-ignore
import { Glyph } from "./Glyph"
// @ts-ignore
import { Spinner } from "./Spinner"

export function Cell(props) {
    const {
        layout,
        contentType,
        label,
        align,
        enabled,
        mode,
        ...restProps
    } = props

    //  ------------------------------------------------------------------------------------
    //  BOUNDS

    // const bounds = "hsla(0, 100%, 50%, 0.5)"
    const bounds = "hsla(0, 100%, 50%, 0)"

    //  ------------------------------------------------------------------------------------
    //  STATE

    const [state, setState] = React.useState("default")

    //  ------------------------------------------------------------------------------------
    //  RENDER CONTENT

    const renderContent = () => {
        switch (props.contentType) {
            case "labelOnly":
                return (
                    <Text
                        widthType={"auto"}
                        left={16}
                        right={16}
                        center="y"
                        content={props.label}
                        size={"body"}
                        bold={true}
                        color={"contentPrimary"}
                        align={props.align}
                        mode={props.mode}
                        background={bounds}
                    />
                )
                break
        }
    } // end of renderContent

    const content = React.useMemo(() => renderContent(), [
        layout,
        contentType,
        label,
        align,
        enabled,
        mode,
    ])

    //  ------------------------------------------------------------------------------------
    //  MAIN

    return (
        <Frame
            {...restProps}
            name="Main Container"
            width="100%"
            height="100%"
            radius={8}
            background={themeColors[props.mode].bgTertiary}
            overflow="hidden"
        >
            {/* Darken on tap */}
            <Frame
                top={0}
                name="While Tap Frame"
                size="100%"
                background="black"
                opacity={0}
                variants={{
                    default: {
                        opacity: 0,
                        transition: transitions.fadeSlow,
                    },
                    whileTap: {
                        opacity: 0.1,
                        transition: transitions.fadeFast,
                    },
                }}
                initial={"default"}
                animate={state}
            />

            {/* Shrink content on tap */}
            <Frame
                name="Content Wrapper"
                size="100%"
                background="none"
                position="relative"
                variants={{
                    default: {
                        scale: 1,
                        opacity: 1,
                        transition: {
                            scale: transitions.bounceSoft,
                            opacity: transitions.fadeSlow,
                        },
                    },
                    whileTap: {
                        scale: 0.99,
                        opacity: 0.6,
                        transition: {
                            scale: transitions.bounceSoft,
                            opacity: transitions.fadeFast,
                        },
                    },
                }}
                initial={"default"}
                animate={state}
                onTapStart={() => {
                    if (props.enabled) {
                        setState("whileTap")
                    }
                }}
                onTapCancel={() => {
                    if (props.enabled) {
                        setState("default")
                    }
                }}
                onTap={() => {
                    if (props.enabled) {
                        setState("default")
                    }
                }}
            >
                {content}
            </Frame>
        </Frame>
    )
}

//  ------------------------------------------------------------------------------------
//  DEFAULT PROPERTIES

Cell.defaultProps = {
    width: 311,
    height: 48,
}

//  ------------------------------------------------------------------------------------
//  PROPERTY CONTROLS

addPropertyControls(Cell, {
    layout: {
        title: "Layout",
        type: ControlType.Enum,
        options: ["single", "group"],
        optionTitles: ["Single", "Group"],
        defaultValue: "single",
    },
    contentType: {
        title: "Content",
        type: ControlType.Enum,
        options: ["labelOnly"],
        optionTitles: ["Label Only"],
        defaultValue: "labelOnly",
    },
    label: {
        title: "Label",
        type: ControlType.String,
        defaultValue: "Ol√° Amigo!",
    },
    align: {
        title: "Align",
        type: ControlType.SegmentedEnum,
        options: ["left", "center", "right"],
        optionTitles: ["Left", "Center", "Right"],
        defaultValue: "left",
    },
    enabled: {
        title: "Enabled",
        type: ControlType.Boolean,
        defaultValue: true,
    },
    mode: {
        title: "Mode",
        type: ControlType.SegmentedEnum,
        options: ["light", "dark"],
        optionTitles: ["Light", "Dark"],
        defaultValue: "light",
    },
})
