import * as React from "react"
import { Frame, addPropertyControls, ControlType, Stack, Color } from "framer"

import {
    themeColors,
    glyphOptions,
    glyphOptionTitles,
    glyphOptions12,
    glyphOptionTitles12,
    textStyles,
    transitions,
    // @ts-ignore
} from "./Shared"
// @ts-ignore
import { Text } from "./Text"
// @ts-ignore
import { Glyph } from "./Glyph"
// @ts-ignore
import { Spinner } from "./Spinner"

export function Button(props) {
    //  ------------------------------------------------------------------------------------
    //  BOUNDS

    // const bounds = "hsla(0, 100%, 50%, 0.5)"
    const bounds = "hsla(0, 100%, 50%, 0)"

    //  ------------------------------------------------------------------------------------
    //  STATE

    const [state, setState] = React.useState("enabled")

    //  ------------------------------------------------------------------------------------
    //  WIDTH

    const getWidth = () => {
        switch (props.shape) {
            case "rectangle":
                return "100%"
                break
            case "circle":
                switch (props.size) {
                    case 24:
                        return 24
                    case 42:
                        return 42
                    case 48:
                        return 48
                        break
                    case 60:
                        return 60
                        break
                    case "custom":
                        return props.width
                        break
                }
                break
            case "pill":
                return "auto"
                break
        }
    }
    const buttonWidth = React.useMemo(() => getWidth(), [
        props.shape,
        props.size,
        props.width,
    ])

    //  ------------------------------------------------------------------------------------
    //  HEIGHT

    const getHeight = () => {
        switch (props.shape) {
            case "rectangle":
                return 48
                break
            case "circle":
                switch (props.size) {
                    case 24:
                        return 24
                    case 42:
                        return 42
                    case 48:
                        return 48
                        break
                    case 60:
                        return 60
                        break
                    case "custom":
                        return props.height
                        break
                }
                break
            case "pill":
                return 34
                break
        }
    }

    const buttonHeight = React.useMemo(() => getHeight(), [
        props.shape,
        props.size,
        props.height,
    ])

    //  ------------------------------------------------------------------------------------
    //  RADIUS

    const getRadius = () => {
        switch (props.shape) {
            case "rectangle":
                return 8
                break
            case "circle":
                return "100%"
                break
            case "pill":
                return 18
                break
        }
    }

    const buttonRadius = React.useMemo(() => getRadius(), [props.shape])

    //  ------------------------------------------------------------------------------------
    //  BACKGROUND COLOR

    const getBackgroundColor = () => {
        switch (props.type) {
            case "primary":
                return themeColors[props.mode]["bgPrimary"]
                break
            case "secondary":
                return themeColors[props.mode]["bgSecondary"]
                break
            case "highlight":
                return themeColors[props.mode]["bgHighlight"]
                break
            case "important":
                return themeColors[props.mode]["bgImportant"]
                break
        }
    }

    const buttonBackgroundColor = React.useMemo(() => getBackgroundColor(), [
        props.type,
        props.enabled,
        props.mode,
    ])

    //  ------------------------------------------------------------------------------------
    //  BACKGROUND OPACITY

    const getBackgroundOpacity = () => {
        switch (props.type) {
            case "primary":
                return props.enabled ? 1 : 0.3
                break
            case "secondary":
                return 1
                break
            case "highlight":
                return 1
                break
            case "important":
                return props.enabled ? 1 : 0.6
                break
        }
    }

    const buttonBackgroundOpacity = React.useMemo(
        () => getBackgroundOpacity(),
        [props.type, props.enabled, props.mode]
    )

    //  ------------------------------------------------------------------------------------
    //  CONTENT COLOR

    const getContentColor = () => {
        switch (props.type) {
            case "primary":
                return "contentButtonPrimary"
                break
            case "secondary":
                return "contentButtonSecondary"
                break
            case "highlight":
                return "contentHighlight"
                break
            case "important":
                return "contentButtonPrimary"
                break
        }
    }

    const buttonContentColor = React.useMemo(() => getContentColor(), [
        props.type,
        props.enabled,
        props.mode,
    ])

    //  ------------------------------------------------------------------------------------
    //  CONTENT OPACITY

    const getContentOpacity = () => {
        switch (props.type) {
            case "primary":
                return props.enabled ? 1 : 0.6
                break
            case "secondary":
                return props.enabled ? 1 : 0.3
                break
            case "highlight":
                return props.enabled ? 1 : 0.45
                break
            case "important":
                return props.enabled ? 1 : 0.6
                break
        }
    }

    const buttonContentOpacity = React.useMemo(() => getContentOpacity(), [
        props.type,
        props.enabled,
        props.mode,
    ])

    //  ------------------------------------------------------------------------------------
    //  GLYPH SIZE

    const getGlyphSize = () => {
        switch (props.size) {
            case 24:
                return 12
                break
            default:
                return 24
                break
        }
    }

    const buttonGlyphSize = React.useMemo(() => getGlyphSize(), [props.size])

    //  ------------------------------------------------------------------------------------
    //  GLYPH SOURCE

    const getGlyphSource = () => {
        switch (props.size) {
            case 24:
                return props.glyph12
                break
            default:
                return props.glyph
                break
        }
    }

    const buttonGlyphSource = React.useMemo(() => getGlyphSource(), [
        props.size,
        props.glyph12,
        props.glyph,
    ])

    //  ------------------------------------------------------------------------------------
    //  SPINNER

    const getSpinner = () => {
        switch (props.type) {
            case "primary":
                return (
                    <Spinner
                        center
                        size={props.shape === "pill" ? "20px" : "24px"}
                        color="contentButtonPrimary"
                        mode={props.mode}
                    />
                )
                break
            case "secondary":
                return (
                    <Spinner
                        center
                        size={props.shape === "pill" ? "20px" : "24px"}
                        color="contentButtonSecondary"
                        mode={props.mode}
                    />
                )
                break
            case "highlight":
                return (
                    <Spinner
                        center
                        size={props.shape === "pill" ? "20px" : "24px"}
                        color="contentHighlight"
                        mode={props.mode}
                    />
                )
                break
            case "important":
                return (
                    <Spinner
                        center
                        size={props.shape === "pill" ? "20px" : "24px"}
                        color="contentButtonPrimary"
                        mode={props.mode}
                    />
                )
                break
        }
    }

    const buttonSpinner = React.useMemo(() => getSpinner(), [props.loading])

    //  ------------------------------------------------------------------------------------
    //  RENDER CONTENT

    const renderButtonContent = () => {
        switch (props.shape) {
            // Rectangle Content
            case "rectangle":
                switch (props.contentType) {
                    case "label":
                        if (!props.loading) {
                            return (
                                <Text
                                    widthType={"auto"}
                                    left={16}
                                    right={16}
                                    center="y"
                                    content={props.label}
                                    size={"title"}
                                    bold={true}
                                    color={buttonContentColor}
                                    opacity={buttonContentOpacity}
                                    align={"center"}
                                    mode={props.mode}
                                    background={bounds}
                                />
                            )
                        } else {
                            return buttonSpinner
                        }
                        break

                    case "glyph":
                        if (!props.loading) {
                            return (
                                <Glyph
                                    center
                                    width={24}
                                    height={24}
                                    glyph={props.glyph}
                                    color={buttonContentColor}
                                    opacity={buttonContentOpacity}
                                    mode={props.mode}
                                    background={bounds}
                                />
                            )
                        } else {
                            return buttonSpinner
                        }
                        break

                    case "glyphLabel":
                        if (!props.loading) {
                            return (
                                <Stack
                                    width="100%"
                                    height="100%"
                                    paddingLeft={16}
                                    paddingRight={16}
                                    direction="horizontal"
                                    distribution={"center"}
                                    alignment={"center"}
                                    gap={8}
                                >
                                    <Glyph
                                        width={24}
                                        height={24}
                                        glyph={props.glyph}
                                        color={buttonContentColor}
                                        opacity={buttonContentOpacity}
                                        mode={props.mode}
                                        background={bounds}
                                    />
                                    <Text
                                        widthType={"auto"}
                                        content={props.label}
                                        bold={true}
                                        size={"title"}
                                        color={buttonContentColor}
                                        opacity={buttonContentOpacity}
                                        align={"leftAlign"}
                                        mode={props.mode}
                                        background={bounds}
                                    />
                                </Stack>
                            )
                        } else {
                            return buttonSpinner
                        }
                        break
                }
                break

            // Circle Content
            case "circle":
                if (!props.loading) {
                    return (
                        <Glyph
                            center
                            width={buttonGlyphSize}
                            height={buttonGlyphSize}
                            glyph={buttonGlyphSource}
                            color={buttonContentColor}
                            opacity={buttonContentOpacity}
                            mode={props.mode}
                            background={bounds}
                        />
                    )
                } else {
                    return buttonSpinner
                }
                break

            // Circle Content
            case "pill":
                if (!props.loading) {
                    return (
                        <div
                            style={{
                                height: "100%",
                                padding: "0px 14px 0px 14px",
                            }}
                        >
                            <Text
                                position="relative"
                                height={"auto"}
                                widthType={"auto"}
                                center="y"
                                content={props.label}
                                bold={true}
                                size={"detail"}
                                color={buttonContentColor}
                                opacity={buttonContentOpacity}
                                align={"center"}
                                mode={props.mode}
                                background={bounds}
                            />
                        </div>
                    )
                } else {
                    return (
                        <div
                            style={{
                                height: "100%",
                                padding: "0px 14px 0px 14px",
                            }}
                        >
                            {buttonSpinner}
                            <Text
                                position="relative"
                                height={"auto"}
                                widthType={"auto"}
                                center="y"
                                content={props.label}
                                bold={true}
                                size={"detail"}
                                color={buttonContentColor}
                                opacity={0}
                                align={"center"}
                                mode={props.mode}
                                background={"red"}
                            />
                        </div>
                    )
                }
                break
        }
    }
    const buttonContent = React.useMemo(() => renderButtonContent(), [props])

    //  ------------------------------------------------------------------------------------
    //  MAIN

    return (
        <Frame
            width={buttonWidth}
            height={buttonHeight}
            radius={buttonRadius}
            background={
                props.customBg ? props.customBgValue : buttonBackgroundColor
            }
            opacity={buttonBackgroundOpacity}
            overflow="hidden"
            onTap={props.onTap}
        >
            {/* Darken on tap */}
            <Frame
                top={0}
                name="While Tap Frame"
                radius={buttonRadius}
                size="100%"
                background="black"
                opacity={0}
                variants={{
                    default: {
                        opacity: 0,
                        transition: transitions.fadeSlow,
                    },
                    whileTap: {
                        opacity: 0.1,
                        transition: transitions.fadeFast,
                    },
                }}
                animate={state}
            />
            {/* Shrink content on tap */}
            <Frame
                name="Content Wrapper"
                width={buttonWidth}
                height={buttonHeight}
                background="none"
                position="relative"
                variants={{
                    default: {
                        scale: 1,
                        opacity: 1,
                        transition: {
                            scale: transitions.bounceStrong,
                            opacity: transitions.fadeSlow,
                        },
                    },
                    whileTap: {
                        scale: 0.92,
                        opacity: 0.8,
                        transition: {
                            scale: transitions.bounceSoft,
                            opacity: transitions.fadeFast,
                        },
                    },
                }}
                initial={"default"}
                animate={state}
                onTapStart={() => {
                    if (props.enabled) {
                        setState("whileTap")
                    }
                }}
                onTapCancel={() => {
                    if (props.enabled) {
                        setState("default")
                    }
                }}
                onTap={() => {
                    if (props.enabled) {
                        setState("default")
                    }
                }}
            >
                {buttonContent}
            </Frame>
        </Frame>
    )
}

//  ------------------------------------------------------------------------------------
//  DEFAULT PROPERTIES

Button.defaultProps = {
    width: 311,
    height: 48,
}

//  ------------------------------------------------------------------------------------
//  PROPERTY CONTROLS

addPropertyControls(Button, {
    shape: {
        title: "Shape",
        type: ControlType.Enum,
        options: ["rectangle", "circle", "pill"],
        optionTitles: ["Rectangle (48)", "Circle", "Pill (34)"],
        defaultValue: "rectangle",
    },
    type: {
        title: "Type",
        type: ControlType.Enum,
        options: ["primary", "secondary", "highlight", "important"],
        optionTitles: ["Primary", "Secondary", "Highlight", "Important"],
        defaultValue: "primary",
    },
    size: {
        title: "Size",
        type: ControlType.Enum,
        options: [24, 42, 48, 60, "custom"],
        optionTitles: ["24", "42", "48", "60", "Custom"],
        defaultValue: 48,
        hidden: ({ shape }) => shape === "rectangle" || shape === "pill",
    },
    contentType: {
        title: "Content",
        type: ControlType.Enum,
        options: ["label", "glyph", "glyphLabel"],
        optionTitles: ["Label", "Glyph", "Glyph + Label"],
        defaultValue: "label",
        hidden: ({ shape }) => shape === "circle" || shape === "pill",
    },
    glyph: {
        title: "Glyph",
        type: ControlType.Enum,
        options: glyphOptions.sort(),
        optionTitles: glyphOptionTitles.sort(),
        defaultValue: "personCircle",
        hidden: ({ shape, contentType, size }) =>
            shape === "pill" ||
            (shape === "rectangle" && contentType === "label") ||
            size <= 24,
    },
    glyph12: {
        title: "Glyph",
        type: ControlType.Enum,
        options: glyphOptions12.sort(),
        optionTitles: glyphOptionTitles12.sort(),
        defaultValue: "plus12",
        hidden: ({ size }) => size !== 24,
    },
    label: {
        title: "Label",
        type: ControlType.String,
        hidden: ({ shape, type, contentType }) =>
            shape === "circle" || contentType === "glyph",
        defaultValue: "Olá Amigo!",
    },
    // circularBg: {
    //     title: "Bg",
    //     type: ControlType.Enum,
    //     options: [
    //         "bgBlue",
    //         "bgBrown",
    //         "bgGreen",
    //         "bgMagenta",
    //         "bgOrange",
    //         "bgPurple",
    //         "bgYellow",
    //     ],
    //     optionTitles: [
    //         "Blue",
    //         "Brown",
    //         "Green",
    //         "Magenta",
    //         "Orange",
    //         "Purple",
    //         "Yellow",
    //     ],
    //     hidden: ({ type }) => type !== "circular",
    //     defaultValue: "bgBlue",
    // },
    enabled: {
        title: "Enabled",
        type: ControlType.Boolean,
    },
    loading: {
        title: "Loading",
        type: ControlType.Boolean,
        defaultValue: false,
        hidden: ({ enabled, size }) => enabled === false || size === 24,
    },
    mode: {
        title: "Mode",
        type: ControlType.SegmentedEnum,
        options: ["light", "dark"],
        optionTitles: ["Light", "Dark"],
    },
    customBg: {
        title: "Custom Bg",
        type: ControlType.Boolean,
        defaultValue: false,
    },
    customBgValue: {
        title: "Color",
        type: ControlType.Color,
        hidden: ({ customBg }) => customBg === false,
    },
})
