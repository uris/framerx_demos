import * as React from "react"
import { Frame, addPropertyControls, ControlType } from "framer"
import { Button } from "./Button"
import { themeColors, textStyles } from "./Shared"

export function OpenTextField(props) {
    const getPlaceHolderText = () => {
        switch (props.textType) {
            case "Any":
                return props.placeholder
                break
            case "Phone":
                return "(555) 555-5555"
                break
            default:
                return props.placeholder
                break
        }
    }

    const [state, setState] = React.useState({
        searchText: getPlaceHolderText(),
        textColor: props.darkmode
            ? themeColors.dark["contentTertiary"]
            : themeColors.light["contentTertiary"],
        blinkPos: "left",
        blinkVisible: props.blinkVisible,
    })

    React.useEffect(() => {
        setState({
            searchText: getPlaceHolderText(),
            textColor: state.textColor,
            blinkPos: "left",
            blinkVisible: props.blinkVisible,
        })
    }, [props.placeholder, props.blinkVisible, props.darkmode, props.textType])

    function updateSearchText(event: React.ChangeEvent) {
        const element = event.nativeEvent.target as HTMLInputElement
        props.valueChange(element.value)
        let searchText, blinkPos, blinkVisible
        if (element.value == "") {
            searchText = getPlaceHolderText()
            blinkPos = "left"
            blinkVisible = props.blinkVisible
        } else if (
            element.value.length <= props.maxLength &&
            element.value != getPlaceHolderText()
        ) {
            searchText = element.value
            blinkPos = "right"
            blinkVisible = props.blinkVisible
        } else {
            element.value = state.searchText
            searchText = state.searchText
            blinkPos = "left"
            blinkVisible = props.blinkVisible
        }
        setState({
            searchText: searchText,
            textColor: getTextColor(),
            blinkPos: blinkPos,
            blinkVisible: blinkVisible,
        })
    }

    const setFocus = () => {
        document.getElementById(props.textInputID).focus()
        setState({
            searchText: state.searchText,
            textColor: state.textColor,
            blinkPos: state.blinkPos,
            blinkVisible: props.blinkVisible,
        })
    }

    const handleKey = (event: React.KeyboardEvent) => {
        if (event.keyCode === 13) {
            doSearch()
        }
    }

    const doSearch = () => {
        setState({
            searchText: state.searchText,
            textColor: state.textColor,
            blinkPos: state.blinkPos,
            blinkVisible: false,
        })
        props.valueChange(state.searchText)
    }

    function getTextColor() {
        if (state.searchText === getPlaceHolderText()) {
            if (props.darkmode) {
                return themeColors.dark["contentTertiary"]
            } else {
                return themeColors.light["contentTertiary"]
            }
        } else {
            if (props.darkmode) {
                return themeColors.dark["contentPrimary"]
            } else {
                return themeColors.light["contentPrimary"]
            }
        }
    }

    const isNumericInput = event => {
        const key = event.keyCode
        return (
            (key >= 48 && key <= 57) || // Allow number line
            (key >= 96 && key <= 105) // Allow number pad
        )
    }

    const isModifierKey = event => {
        const key = event.keyCode
        return (
            event.shiftKey === true ||
            key === 35 ||
            key === 36 || // Allow Shift, Home, End
            (key === 8 || key === 9 || key === 13 || key === 46) || // Allow Backspace, Tab, Enter, Delete
            (key > 36 && key < 41) || // Allow left, up, right, down
            // Allow Ctrl/Command + A,C,V,X,Z
            ((event.ctrlKey === true || event.metaKey === true) &&
                (key === 65 ||
                    key === 67 ||
                    key === 86 ||
                    key === 88 ||
                    key === 90))
        )
    }

    const enforceFormat = event => {
        // Input must be of a valid number format or a modifier key, and not longer than ten digits
        if (!isNumericInput(event) && !isModifierKey(event)) {
            event.preventDefault()
        }
        props.keyPress(event.keyCode, event.key)
    }

    const formatToPhone = event => {
        if (isModifierKey(event)) {
            return
        }

        // I am lazy and don't like to type things more than once
        const target = event.target
        const input = target.value.replace(/\D/g, "").substring(0, 10) // First ten digits of input only
        const zip = input.substring(0, 3)
        const middle = input.substring(3, 6)
        const last = input.substring(6, 10)

        if (input.length > 6) {
            target.value = `(${zip}) ${middle}-${last}`
        } else if (input.length > 3) {
            target.value = `(${zip}) ${middle}`
        } else if (input.length > 0) {
            target.value = `(${zip}`
        }
    }

    const updateKeyDown = (event: React.KeyboardEvent) => {
        props.keyPress(event.keyCode, event.key)
    }

    return (
        <Frame
            onTap={setFocus}
            width={props.width}
            height={props.height}
            background={"none"}
        >
            <div
                style={{
                    textAlign: "center",
                    ...textStyles["display"],
                }}
            >
                <Frame
                    animate={{ opacity: 0 }}
                    transition={{ duration: 0.6, yoyo: Infinity }}
                    visible={
                        state.blinkPos === "left" && props.blinkVisible
                            ? true
                            : false
                    }
                    top={2}
                    height={33}
                    width={2}
                    style={{ display: "inline" }}
                    background={
                        props.darkmode
                            ? themeColors.dark["contentPrimary"]
                            : themeColors.light["contentPrimary"]
                    }
                />
                <div
                    style={{
                        color: getTextColor(),
                        display: "inline",
                        background: "none",
                        padding: "0 2px",
                    }}
                >
                    {state.searchText}
                </div>
                <Frame
                    animate={{ opacity: 0 }}
                    transition={{ duration: 0.6, yoyo: Infinity }}
                    visible={
                        state.blinkPos === "right" && props.blinkVisible
                            ? true
                            : false
                    }
                    top={2}
                    height={33}
                    width={2}
                    style={{ display: "inline" }}
                    background={
                        props.darkmode
                            ? themeColors.dark["contentPrimary"]
                            : themeColors.light["contentPrimary"]
                    }
                />
            </div>
            <input
                id={props.textInputID}
                onChange={updateSearchText}
                placeholder={props.placeholder}
                onKeyDown={
                    props.textType === "Phone" ? enforceFormat : updateKeyDown
                }
                onKeyUp={props.textType === "Phone" ? formatToPhone : null}
                type={"text"}
                autoFocus={true}
                autoCapitalize={"off"}
                autoComplete={"off"}
                autoCorrect={"off"}
                spellCheck={false}
                style={{
                    outline: "none",
                    opacity: 0,
                    width: "0px",
                }}
            />
        </Frame>
    )
}

/* ------------------------------------------------------------------------------------------------------------- */
/*                                                   PROPERTIES                                                  */
/* ------------------------------------------------------------------------------------------------------------- */

OpenTextField.defaultProps = {
    placeholder: "",
    searchText: "",
    maxLength: 16,
    textInputID: "_textInput",
    height: 38,
    width: 375,
    darkmode: false,
    blinkVisible: false,
    textType: "Any",
    keyPress: () => null,
    valueChange: () => null,
}

addPropertyControls(OpenTextField, {
    textType: {
        type: ControlType.Enum,
        title: "Type",
        options: ["Any", "Phone"],
        optionTitles: ["Free Form", "Phone Number"],
    },
    placeholder: {
        type: ControlType.String,
        title: "Placeholder",
        hidden(props) {
            return props.textType !== "Any"
        },
    },
    maxLength: {
        type: ControlType.Number,
        title: "Max Length",
    },
    darkmode: {
        type: ControlType.Boolean,
        title: "dark Mode",
    },
    blinkVisible: {
        type: ControlType.Boolean,
        title: "Show Cursor",
    },
})
