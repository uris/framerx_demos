import * as React from "react"
import { Frame, addPropertyControls, ControlType, Stack } from "framer"
import {
    themeColors,
    glyphOptions,
    glyphOptionTitles,
    textStyles,
} from "./Shared"
import { Text } from "./Text"
import { Glyph } from "./Glyph"

// const bounds = "hsla(0, 100%, 50%, 0.5)"
const bounds = "none"

/*---------------------------------------------------------------------------------------------------- */
/*                                             TAB COMPONENT                                           */
/* --------------------------------------------------------------------------------------------------- */
function Tab({ tab, tabLabel, index, onTap, activeTab, labels, ...props }) {
    let tabName = `tab` + (index + 1)

    return (
        <Frame
            {...props}
            whileTap={{ scale: 0.95, opacity: 0.6 }}
            transition={{
                scale: {
                    type: "spring",
                    stiffness: 400,
                    damping: 12,
                    mass: 0.8,
                },
                opacity: {
                    duration: 0.1,
                    type: "tween",
                },
            }}
            onTap={onTap}
        >
            <Stack
                size="100%"
                gap={3}
                direction="vertical"
                distribution="center"
                alignment="center"
            >
                <Glyph
                    glyph={tab}
                    color={
                        activeTab === tabName
                            ? "contentHighlight"
                            : "contentTertiary"
                    }
                    mode={props.mode}
                />
                {labels === "show" && (
                    <Text
                        widthType="100%"
                        height={14}
                        content={tabLabel}
                        size="small"
                        color={
                            activeTab === tabName
                                ? "contentHighlight"
                                : "contentTertiary"
                        }
                        align="center"
                        mode={props.mode}
                    />
                )}
            </Stack>
        </Frame>
    )
}

/*----------------------------------------------------------------------------------------------------- */
/*                                           NAV-BOTTOM COMPONENT                                       */
/* ---------------------------------------------------------------------------------------------------- */

export function Nav_Bottom(props) {
    /*------------------------------------------------------------------------------------------------- */
    /*                                           NAV HEIGHT                                             */
    /* ------------------------------------------------------------------------------------------------ */

    const getNavHeight = () => {
        switch (props.phone) {
            case "iPhoneX":
                return 83
                break
            case "iPhone8":
                return 49
                break
            case "pixel3":
                return 73
                break
        }
    }
    const navHeight = React.useMemo(() => getNavHeight(), [props])

    /*------------------------------------------------------------------------------------------------- */
    /*                                          STACK HEIGHT                                            */
    /* ------------------------------------------------------------------------------------------------ */

    const getStacktHeight = () => {
        switch (props.phone) {
            case "iPhoneX":
                return 49
                break
            case "iPhone8":
                return 49
                break
            case "pixel3":
                return 56
                break
        }
    }
    const stackHeight = React.useMemo(() => getStacktHeight(), [props])

    /*------------------------------------------------------------------------------------------------- */
    /*                                           TABS ARRAY                                             */
    /* ------------------------------------------------------------------------------------------------ */

    let tabs = []
    let counter = 1

    while (counter < props.count + 1) {
        tabs.push(props[`tab` + counter])
        counter++
    }

    /*------------------------------------------------------------------------------------------------- */
    /*                                        BACKGROUND STYLE                                          */
    /* ------------------------------------------------------------------------------------------------ */

    const getBackgroundStyle = () => {
        if (props.bg === "show") {
            switch (props.phone) {
                case "iPhoneX":
                case "iPhone8":
                    return {
                        WebkitBackdropFilter: "blur(20px)",
                        backdropFilter: "blur(20px)",
                    }
                    break
            }
        } else {
            return {}
        }
    }
    const backgroundStyle = React.useMemo(() => getBackgroundStyle(), [props])

    /*------------------------------------------------------------------------------------------------- */
    /*                                         BACKGROUND COLOR                                         */
    /* ------------------------------------------------------------------------------------------------ */

    const getBackgroundColor = () => {
        if (props.bg === "show") {
            switch (props.phone) {
                case "iPhoneX":
                case "iPhone8":
                    if (props.mode === "light") {
                        return themeColors.light.bgNavIOS
                    } else {
                        return themeColors.dark.bgNavIOS
                    }
                    break
                case "pixel3":
                    if (props.mode === "light") {
                        return themeColors.light.bgNavAndroid
                    } else {
                        return themeColors.dark.bgNavAndroid
                    }
                    break
            }
        } else {
            return "none"
        }
    }
    const backgroundColor = React.useMemo(() => getBackgroundColor(), [props])

    /*------------------------------------------------------------------------------------------------- */
    /*                                              STATES                                              */
    /* ------------------------------------------------------------------------------------------------ */

    const [activeTab, setActiveTab] = React.useState(props.active)
    const [state, setState] = React.useState(props.initial)

    React.useEffect(() => {
        setActiveTab(props.active)
        setState(props.initial)
    }, [props.active, props.state])

    /*------------------------------------------------------------------------------------------------- */
    /*                                               MAIN                                               */
    /* ------------------------------------------------------------------------------------------------ */

    return (
        <Frame
            width="100%"
            height={navHeight}
            style={backgroundStyle}
            background={backgroundColor}
        >
            <Stack
                width="100%"
                height={stackHeight}
                top={0}
                direction="horizontal"
                gap={0}
                background={bounds}
                variants={{
                    hide: {},
                    show: {
                        opacity: 1,
                        transition: {
                            staggerChildren: 0.1,
                            delayChildren: 0.1,
                        },
                    },
                }}
            >
                {tabs.map((tab, index) => {
                    return (
                        <Tab
                            tab={tab}
                            tabLabel={props[`tab${index + 1}_label`]}
                            index={index}
                            key={index.toString()}
                            width="1fr"
                            height="100%"
                            activeTab={activeTab}
                            background={bounds}
                            mode={props.mode}
                            labels={props.labels}
                            onTap={() => {
                                setActiveTab(`tab${index + 1}`)
                                props.onActiveChange(`tab${index + 1}`)
                            }}
                        />
                    )
                })}
            </Stack>
        </Frame>
    )
}

/*---------------------------------------------------------------------------------------------------- */
/*                                               PROPERTIES                                            */
/* --------------------------------------------------------------------------------------------------- */

Nav_Bottom.defaultProps = {
    width: 375,
    height: 83,
    phone: "iPhoneX",
    count: 3,
    labels: "hide",
    tab1: "website",
    tab1_label: "Text",
    tab2: "domain",
    tab2_label: "Text",
    tab3: "person",
    tab3_label: "Text",
    tab4: "calendar",
    tab4_label: "Text",
    tab5: "shoppingBag",
    tab5_label: "Text",
    active: "tab1",
    bg: "show",
    // initial: "show",
    mode: "light",
    onActiveChange: active => {},
}

addPropertyControls(Nav_Bottom, {
    phone: {
        title: "Phone",
        type: ControlType.Enum,
        options: ["iPhoneX", "iPhone8", "pixel3"],
        optionTitles: ["iPhone X (83)", "iPhone 8 (49)", "Pixel 3 (73)"],
    },
    count: {
        title: "Count",
        type: ControlType.Number,
        min: 3,
        max: 5,
        step: 1,
        displayStepper: true,
    },
    labels: {
        title: "Labels",
        type: ControlType.SegmentedEnum,
        options: ["hide", "show"],
        optionTitles: ["Hide", "Show"],
    },
    tab1: {
        title: "Tab 1",
        type: ControlType.Enum,
        options: glyphOptions.sort(),
        optionTitles: glyphOptionTitles.sort(),
    },
    tab1_label: {
        title: "⤷ Label",
        type: ControlType.String,
        hidden: ({ labels }) => labels === "hide",
    },
    tab2: {
        title: "Tab 2",
        type: ControlType.Enum,
        options: glyphOptions.sort(),
        optionTitles: glyphOptionTitles.sort(),
    },
    tab2_label: {
        title: "⤷ Label",
        type: ControlType.String,
        hidden: ({ labels }) => labels === "hide",
    },
    tab3: {
        title: "Tab 3",
        type: ControlType.Enum,
        options: glyphOptions.sort(),
        optionTitles: glyphOptionTitles.sort(),
    },
    tab3_label: {
        title: "⤷ Label",
        type: ControlType.String,
        hidden: ({ labels }) => labels === "hide",
    },
    tab4: {
        title: "Tab 4",
        type: ControlType.Enum,
        options: glyphOptions.sort(),
        optionTitles: glyphOptionTitles.sort(),
        hidden: ({ count }) => count < 4,
    },
    tab4_label: {
        title: "⤷ Label",
        type: ControlType.String,
        hidden: ({ labels, count }) => count < 4 || labels === "hide",
    },
    tab5: {
        title: "Tab 5",
        type: ControlType.Enum,
        options: glyphOptions.sort(),
        optionTitles: glyphOptionTitles.sort(),
        hidden: ({ count }) => count < 5,
    },
    tab5_label: {
        title: "⤷ Label",
        type: ControlType.String,
        hidden: ({ labels, count }) => count < 5 || labels === "hide",
    },
    active: {
        title: "Active",
        type: ControlType.Enum,
        options: ["tab1", "tab2", "tab3", "tab4", "tab5"],
        optionTitles: ["Tab 1", "Tab 2", "Tab 3", "Tab 4", "Tab 5"],
    },
    bg: {
        title: "Bg",
        type: ControlType.SegmentedEnum,
        options: ["hide", "show"],
        optionTitles: ["Hide", "Show"],
    },
    mode: {
        title: "Mode",
        type: ControlType.SegmentedEnum,
        options: ["light", "dark"],
        optionTitles: ["Light", "Dark"],
    },
})
